
//创建GameObject(Viki-room)
    GameObject* go = new GameObject("GO");
    //挂上 Transform
    transform_obj.push_back(dynamic_cast<Transform*>(go->AddComponent("Transform")));
    transform_obj[0]->set_position(glm::vec3(3.0f,0.0f,0.0f));
    transform_obj[0]->set_rotation(glm::vec3(0.0f,0.0f,0.0f));
    transform_obj[0]->set_scale(glm::vec3(1.0f));
   
    //挂上MeshFilter
    auto meshfilter = dynamic_cast<MeshFilter*>(go->AddComponent("MeshFilter"));
    meshfilter->LoadMesh(SG_DATA_PATH("Model/obj/viking_room.obj"));
    
    //挂上MeshRenderer 组件
    mesh_renderer.push_back(dynamic_cast<MeshRenderer*>(go->AddComponent("MeshRenderer")));
    Material* material=new Material();//设置材质
    material->Parse(SG_DATA_PATH("Material/viking_room.mat"));
    mesh_renderer[0]->SetMaterial(material);
    
    //创建GameObject(Light Cube)
    GameObject* go2 = new GameObject("GO");
    //挂上 Transform
    transform_obj.push_back(dynamic_cast<Transform*>(go2->AddComponent("Transform")));
    transform_obj[1]->set_position(glm::vec3(1.0f,5.0f,0.0f));
    transform_obj[1]->set_rotation(glm::vec3(0.0f,0.0f,0.0f));
    transform_obj[1]->set_scale(glm::vec3(1.0f));
   
    //挂上MeshFilter
    auto meshfilter_2 = dynamic_cast<MeshFilter*>(go2->AddComponent("MeshFilter"));
    meshfilter_2->LoadMesh(SG_DATA_PATH("BasicShapes/Light/Light.obj"));
   
    //挂上MeshRenderer 组件
    mesh_renderer.push_back(dynamic_cast<MeshRenderer*>(go2->AddComponent("MeshRenderer")));
    Material* material_2=new Material();//设置材质
    material_2->Parse(SG_DATA_PATH("Material/Light/Light.mat"));
    mesh_renderer[1]->SetMaterial(material_2);


    //创建GameObject(Viki-room2)
    GameObject* go3 = new GameObject("GO");
    //挂上 Transform
    transform_obj.push_back(dynamic_cast<Transform*>(go3->AddComponent("Transform")));
    transform_obj[2]->set_position(glm::vec3(-2.0f,0.0f,0.0f));
    transform_obj[2]->set_rotation(glm::vec3(0.0f,0.0f,0.0f));
    transform_obj[2]->set_scale(glm::vec3(1.0f));
   
    //挂上MeshFilter
    auto meshfilter_3 = dynamic_cast<MeshFilter*>(go3->AddComponent("MeshFilter"));
    meshfilter_3->LoadMesh(SG_DATA_PATH("Model/obj/viking_room.obj"));
    
    //挂上MeshRenderer 组件
    mesh_renderer.push_back(dynamic_cast<MeshRenderer*>(go3->AddComponent("MeshRenderer")));
    Material* material_3=new Material();//设置材质
    material_3->Parse(SG_DATA_PATH("Material/blend.mat"));
    mesh_renderer[2]->blend = true;
    mesh_renderer[2]->SetMaterial(material_3);


    //创建灯光场景测试:
    //创建GameObject(Pot)
    GameObject* go4 = new GameObject("Light");
    //挂上 Transform
    transform_obj.push_back(dynamic_cast<Transform*>(go4->AddComponent("Transform")));
    transform_obj[3]->set_position(glm::vec3(-1.0f,2.0f,0.0f));
    transform_obj[3]->set_rotation(glm::vec3(0.0f,0.0f,0.0f));
    transform_obj[3]->set_scale(glm::vec3(1.0f));
   
    //挂上MeshFilter
    auto meshfilter_4 = dynamic_cast<MeshFilter*>(go4->AddComponent("MeshFilter"));
    meshfilter_4->LoadMesh(SG_DATA_PATH("Model/obj/pot.obj"));
    
    //挂上MeshRenderer 组件
    Light_renderer.push_back(dynamic_cast<LightRenderer*>(go4->AddComponent("LightRenderer")));
    Material* material_4=new Material();//设置材质
    material_4->Parse(SG_DATA_PATH("Material/pot.mat"));
    Light_renderer[0]->SetMaterial(material_4);


    //创建GameObject(Plane)
    GameObject* go5 = new GameObject("Light");
    //挂上 Transform
    transform_obj.push_back(dynamic_cast<Transform*>(go5->AddComponent("Transform")));
    transform_obj[4]->set_position(glm::vec3(0.0f,-1.0f,0.0f));
    transform_obj[4]->set_rotation(glm::vec3(0.0f,0.0f,0.0f));
    transform_obj[4]->set_scale(glm::vec3(1.0f));
   
    //挂上MeshFilter
    auto meshfilter_5 = dynamic_cast<MeshFilter*>(go5->AddComponent("MeshFilter"));
    meshfilter_5->LoadMesh(SG_DATA_PATH("BasicShapes/Plane/Plane.obj"));
    
    //挂上MeshRenderer 组件
    Light_renderer.push_back(dynamic_cast<LightRenderer*>(go5->AddComponent("LightRenderer")));
    Material* material_5=new Material();//设置材质
    material_5->Parse(SG_DATA_PATH("Material/plane/plane.mat"));
    Light_renderer[1]->SetMaterial(material_5);

    //创建相机Object
    auto go_camera = new GameObject("main_camera");
    
    //挂上 Transform组件
    transform_camera = dynamic_cast<Transform*>(go_camera->AddComponent("Transform"));
    transform_camera->set_position(glm::vec3(0.0f,0.0f,19.0f));
    //挂上Camera组件
    camera =dynamic_cast<Camera*>(go_camera->AddComponent("Camera"));
    